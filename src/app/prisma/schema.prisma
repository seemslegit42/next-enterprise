// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  workflows     Workflow[]
  agents        AgentDefinition[]
  executions    WorkflowExecution[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  status      TaskStatus
  assignedTo  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [assignedTo], references: [id])
}

model ProcessLog {
  id          String   @id @default(cuid())
  processName String
  timestamp   DateTime @default(now())
  level       LogLevel
  message     String
  metadata    Json
}

model Workflow {
  id            String   @id @default(cuid())
  name          String
  description   String?
  definitionJson Json
  version       Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  user          User     @relation(fields: [createdBy], references: [id])
  executions    WorkflowExecution[]
  executionLogs WorkflowExecutionLog[]
}

model LogEntry {
  id                    String              @id @default(cuid())
  timestamp             DateTime            @default(now())
  nodeId                String
  nodeType              String
  level                 String              // 'Info', 'Warn', 'Error'
  message               String
  data                  Json?

  workflowExecutionLogId String
  workflowExecutionLog   WorkflowExecutionLog @relation(fields: [workflowExecutionLogId], references: [id], onDelete: Cascade)
}

// Enums
enum TaskStatus {
  pending
  running
  completed
  failed
}

enum LogLevel {
  info
  warn
  error
}

enum AgentProvider {
  SuperAGI
  AutoGen
  OpenAI_Assistant
  Custom
}

enum ExecutionState {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
  PAUSED
}

// Add Account, Session, AgentDefinition, WorkflowExecution, and WorkflowExecutionLog models
// These were referenced but not fully defined in the excerpts



