// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  workflows     Workflow[]
  agents        AgentDefinition[]
  executions    WorkflowExecution[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  status      TaskStatus
  assignedTo  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [assignedTo], references: [id])
}

model ProcessLog {
  id          String   @id @default(cuid())
  processName String
  timestamp   DateTime @default(now())
  level       LogLevel
  message     String
  metadata    Json
}

model Workflow {
  id            String   @id @default(cuid())
  name          String
  description   String?
  definitionJson Json
  version       Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  user          User     @relation(fields: [createdBy], references: [id])
  executions    WorkflowExecution[]
  executionLogs WorkflowExecutionLog[]
}

model WorkflowExecution {
  id            String          @id @default(cuid())
  workflowId    String
  state         ExecutionState
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  startedBy     String
  variables     Json?
  logs          Json?
  output        Json?
  error         String?
  nodeStates    Json?

  workflow      Workflow        @relation(fields: [workflowId], references: [id])
  user          User            @relation(fields: [startedBy], references: [id])
}

model AgentDefinition {
  id          String        @id @default(cuid())
  name        String
  description String?
  provider    AgentProvider
  config      Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String

  user        User          @relation(fields: [createdBy], references: [id])
}

model WorkflowExecutionLog {
  id                   String     @id @default(cuid())
  workflowDefinitionId String
  executionId          String     @unique
  startTime            DateTime   @default(now())
  endTime              DateTime?
  status               String     // 'Running', 'Completed', 'Failed'

  workflow             Workflow   @relation(fields: [workflowDefinitionId], references: [id])
  logEntries           LogEntry[]
}

model LogEntry {
  id                    String              @id @default(cuid())
  timestamp             DateTime            @default(now())
  nodeId                String
  nodeType              String
  level                 String              // 'Info', 'Warn', 'Error'
  message               String
  data                  Json?

  workflowExecutionLogId String
  workflowExecutionLog   WorkflowExecutionLog @relation(fields: [workflowExecutionLogId], references: [id], onDelete: Cascade)
}

// Enums
enum TaskStatus {
  pending
  running
  completed
  failed
}

enum LogLevel {
  info
  warn
  error
}

enum AgentProvider {
  SuperAGI
  AutoGen
  OpenAI_Assistant
  Custom
}

enum ExecutionState {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
  PAUSED
}
